@page "/mailto"
@using BlazorShop.Models
@using BlazorShop.Data
@using System.ComponentModel.DataAnnotations
@using BlazorShop.Services
@using MailKit
@using Serilog

<PageTitle>MailTo</PageTitle>

@inject IEmailSender SendMail
@inject ILogger<MailTo> Logger


<h4>Если у Вас остались какие-то вопросы или пожелания, Вы можете заполнить форму обратной связи.</h4>

<EditForm Model="_model" OnValidSubmit="ProcessValidForm">
	<DataAnnotationsValidator />

	<table border="0" cellpadding="10">
		<tr><td>Ваш адрес электронной почты:</td><td><InputText @bind-Value="_model.UserEmail" @onclick="RefreshMessageText" /></td></tr>
		<tr><td>Тема сообщения:</td><td><InputText @bind-Value="_model.MailSubject" @onclick="RefreshMessageText" /></td></tr>
		<tr><td>Текст сообщения:</td><td><InputTextArea @bind-Value="_model.MailBody" @onclick="RefreshMessageText"></InputTextArea></td></tr>
	</table>
	<div class="add_product_div">@_messageText</div>

	<br /> <input type="submit" value="Отправить">
	<ValidationSummary />
</EditForm>

@code {
	private FormModel _model = new();
	string _messageText;
	int _attemptToSend = 0;


	private async Task ProcessValidForm()
	{
		_attemptToSend++;
		Logger.LogInformation("Попытка отправки имейла от {Email}", _model.UserEmail);

		try
		{
			await SendMail.SendMailAsync(_model.UserEmail, _model.MailSubject, _model.MailBody);
			_messageText = "Ваше сообщение успешно отправлено.";
			Logger.LogInformation("Письмо от {Email} успешно отправлено ", _model.UserEmail);
			_model = new();
		}
		catch (Exception e) when (_attemptToSend <3
										&& e is ServiceNotAuthenticatedException
										or ServiceNotConnectedException
										)
		{
			Logger.LogWarning(e, "Ошибка отправки имейла от {Email}. Делаем еще одну попытку", _model.UserEmail, e.Message);
			await ProcessValidForm();
		}

		catch (Exception e) 
		{
			Logger.LogCritical(e, "Ошибка отправки имейла от {Email}. Ошибка: {Error}", _model.UserEmail, e.Message);
			_messageText = "Ошибка отправки письма";
		}
	}

	private class FormModel
	{
		[Required(ErrorMessage = "Необходимо заполнить адрес электронной почты.")]
		[EmailAddress(ErrorMessage = "Введен некорректный адрес электронной почты.")]
		public string UserEmail { get; set; }

		[Required(ErrorMessage = "Необходимо заполнить тему сообщения.")]
		[MinLength(3, ErrorMessage = "Тема должна содержать более 3-х символов.")]
		public string MailSubject { get; set; }

		[Required(ErrorMessage = "Необходимо заполнить текст сообщения.")]
		[MinLength(3, ErrorMessage = "Текст сообщения должен содержать более 3-х символов.")]
		public string MailBody { get; set; }
	}

	private void RefreshMessageText()
	{
		_messageText = "";
	}
}
